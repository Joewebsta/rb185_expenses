#! /usr/bin/env ruby
# frozen_string_literal: true

require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
  end

  def list_expenses
    result = @connection.exec('SELECT * FROM expenses ORDER BY created_on ASC')
    display_expenses(result)
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = 'INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)'
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_expenses(query)
    sql = 'SELECT * FROM expenses WHERE memo ILIKE $1;'
    result = @connection.exec_params(sql, ["%#{query}%"])
    display_expenses(result)
  end

  def delete_expense(id)
    sql = 'SELECT * FROM expenses WHERE id = $1'
    result = @connection.exec_params(sql, [id])

    if result.values.size.zero?
      puts "There is no expense with the id '#{id}'."
    else
      sql = 'DELETE FROM expenses WHERE id = $1'
      @connection.exec_params(sql, [id])

      puts 'The following expense has been deleted:'
      display_expenses(result)
    end
  end

  def delete_all_expenses
    @connection.exec('DELETE FROM expenses')
    puts 'All expenses have been deleted.'
  end

  private

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [tuple['id'].rjust(3),
                 tuple['created_on'].rjust(10),
                 tuple['amount'].rjust(12),
                 tuple['memo']]

      puts columns.join(' | ')
    end
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    command = args.shift
    case command
    when 'list' then @application.list_expenses
    when 'delete' then @application.delete_expense(args[0])
    when 'clear'
      puts 'This will remove all expenses. Are you sure? (y/n)'
      response = $stdin.getch
      @application.delete_all_expenses if response == 'y'
    when 'search'
      keyword = args[0]
      @application.search_expenses(keyword)
    when 'add'
      amount = args[0]
      memo = args[1]
      abort 'You must provide an amount and memo.' unless amount && memo
      @application.add_expense(amount, memo)
    else display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system
  
      Commands:
  
      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo 
      
    HELP
  end
end

CLI.new.run(ARGV)
